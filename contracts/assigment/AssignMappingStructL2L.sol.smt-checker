Running contracts/assigment/AssignMappingStructL2L.sol
Warning: This is a pre-release compiler version, please do not use it in production.
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet support this expression.
        s1[msg.sender].x = a;
        ^--------------^
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        s1[msg.sender].x = a;
        ^------------^
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet implement such assignments.
        s1[msg.sender].x = a;
        ^------------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet support this expression.
        s2[msg.sender].x = b;
        ^--------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        s2[msg.sender].x = b;
        ^------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet implement such assignments.
        s2[msg.sender].x = b;
        ^------------------^
smt_checker_input_r1zl:17:16: Warning: Assertion checker does not yet support this expression.
        assert(sl1[msg.sender].x == a);
               ^---------------^
smt_checker_input_r1zl:17:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl1[msg.sender].x == a);
               ^-------------^
smt_checker_input_r1zl:18:16: Warning: Assertion checker does not yet support this expression.
        assert(sl2[msg.sender].x == b);
               ^---------------^
smt_checker_input_r1zl:18:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl2[msg.sender].x == b);
               ^-------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet support this expression.
        sl1[msg.sender].x = c;
        ^---------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        sl1[msg.sender].x = c;
        ^-------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet implement such assignments.
        sl1[msg.sender].x = c;
        ^-------------------^
smt_checker_input_r1zl:22:16: Warning: Assertion checker does not yet support this expression.
        assert(sl1[msg.sender].x == c);
               ^---------------^
smt_checker_input_r1zl:22:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl1[msg.sender].x == c);
               ^-------------^
smt_checker_input_r1zl:23:16: Warning: Assertion checker does not yet support this expression.
        assert(sl2[msg.sender].x == c);
               ^---------------^
smt_checker_input_r1zl:23:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl2[msg.sender].x == c);
               ^-------------^
smt_checker_input_r1zl:24:16: Warning: Assertion checker does not yet support this expression.
        assert(s1[msg.sender].x == a);
               ^--------------^
smt_checker_input_r1zl:24:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(s1[msg.sender].x == a);
               ^------------^
smt_checker_input_r1zl:25:16: Warning: Assertion checker does not yet support this expression.
        assert(s2[msg.sender].x == c);
               ^--------------^
smt_checker_input_r1zl:25:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(s2[msg.sender].x == c);
               ^------------^
smt_checker_input_r1zl:17:9: Warning: Assertion violation happens here
        assert(sl1[msg.sender].x == a);
        ^----------------------------^
  for:
  a = 2
  b = 1
  c = 0
  msg.sender = 1236

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:18:9: Warning: Assertion violation happens here
        assert(sl2[msg.sender].x == b);
        ^----------------------------^
  for:
  a = (- 1)
  b = 1
  c = 0
  msg.sender = 8855

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:22:9: Warning: Assertion violation happens here
        assert(sl1[msg.sender].x == c);
        ^----------------------------^
  for:
  a = (- 1)
  b = 0
  c = (- 2)
  msg.sender = 8365

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:23:9: Warning: Assertion violation happens here
        assert(sl2[msg.sender].x == c);
        ^----------------------------^
  for:
  a = 1
  b = 2
  c = 0
  msg.sender = 449

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:24:9: Warning: Assertion violation happens here
        assert(s1[msg.sender].x == a);
        ^---------------------------^
  for:
  a = (- 2)
  b = 0
  c = (- 1)
  msg.sender = 5853

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:25:9: Warning: Assertion violation happens here
        assert(s2[msg.sender].x == c);
        ^---------------------------^
  for:
  a = 0
  b = 1
  c = (- 1)
  msg.sender = 1142

Callstack: 

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet support this expression.
        s1[msg.sender].x = a;
        ^--------------^
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        s1[msg.sender].x = a;
        ^------------^
smt_checker_input_r1zl:13:9: Warning: Assertion checker does not yet implement such assignments.
        s1[msg.sender].x = a;
        ^------------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet support this expression.
        s2[msg.sender].x = b;
        ^--------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        s2[msg.sender].x = b;
        ^------------^
smt_checker_input_r1zl:14:9: Warning: Assertion checker does not yet implement such assignments.
        s2[msg.sender].x = b;
        ^------------------^
smt_checker_input_r1zl:17:16: Warning: Assertion checker does not yet support this expression.
        assert(sl1[msg.sender].x == a);
               ^---------------^
smt_checker_input_r1zl:17:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl1[msg.sender].x == a);
               ^-------------^
smt_checker_input_r1zl:18:16: Warning: Assertion checker does not yet support this expression.
        assert(sl2[msg.sender].x == b);
               ^---------------^
smt_checker_input_r1zl:18:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl2[msg.sender].x == b);
               ^-------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet support this expression.
        sl1[msg.sender].x = c;
        ^---------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        sl1[msg.sender].x = c;
        ^-------------^
smt_checker_input_r1zl:21:9: Warning: Assertion checker does not yet implement such assignments.
        sl1[msg.sender].x = c;
        ^-------------------^
smt_checker_input_r1zl:22:16: Warning: Assertion checker does not yet support this expression.
        assert(sl1[msg.sender].x == c);
               ^---------------^
smt_checker_input_r1zl:22:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl1[msg.sender].x == c);
               ^-------------^
smt_checker_input_r1zl:23:16: Warning: Assertion checker does not yet support this expression.
        assert(sl2[msg.sender].x == c);
               ^---------------^
smt_checker_input_r1zl:23:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(sl2[msg.sender].x == c);
               ^-------------^
smt_checker_input_r1zl:24:16: Warning: Assertion checker does not yet support this expression.
        assert(s1[msg.sender].x == a);
               ^--------------^
smt_checker_input_r1zl:24:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(s1[msg.sender].x == a);
               ^------------^
smt_checker_input_r1zl:25:16: Warning: Assertion checker does not yet support this expression.
        assert(s2[msg.sender].x == c);
               ^--------------^
smt_checker_input_r1zl:25:16: Warning: Assertion checker does not yet implement type struct AssignMappingStructL2L.S storage ref
        assert(s2[msg.sender].x == c);
               ^------------^
smt_checker_input_r1zl:17:9: Warning: Assertion violation happens here
        assert(sl1[msg.sender].x == a);
        ^----------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 281

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:18:9: Warning: Assertion violation happens here
        assert(sl2[msg.sender].x == b);
        ^----------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 535

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:22:9: Warning: Assertion violation happens here
        assert(sl1[msg.sender].x == c);
        ^----------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 5920

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:23:9: Warning: Assertion violation happens here
        assert(sl2[msg.sender].x == c);
        ^----------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 8945

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:24:9: Warning: Assertion violation happens here
        assert(s1[msg.sender].x == a);
        ^---------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 6283

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_r1zl:25:9: Warning: Assertion violation happens here
        assert(s2[msg.sender].x == c);
        ^---------------------------^
  for:
  a = 0
  b = 1
  c = 2
  msg.sender = 2997

Callstack: 
smt_checker_input_r1zl:30:9: 
        locToLoc(0, 1, 2);
        ^---------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
0.13user 0.26system 0:00.39elapsed 99%CPU (0avgtext+0avgdata 53900maxresident)k
0inputs+0outputs (0major+5378minor)pagefaults 0swaps
