Running contracts/storageptr/MappingStorageArgumentAliasBase.sol
Warning: This is a pre-release compiler version, please do not use it in production.
smt_checker_input_VXKx:11:29: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref[msg.sender] = s2ref[msg.sender] + 1;
                            ^-------------------^
  for:
  <result> = 0x80 * 2**248
  a = (- 57896044618658097711785492504343953926634992332820282019728792003956564814114)
  b = (- 57896044618658097711785492504343953926634992332820282019728792003956564814115)
  msg.sender = 449
  s1ref[msg.sender] = 0
  s1ref_alias_s2ref = false
  s2ref[msg.sender] = 0x80 * 2**248 - 1

Callstack: 

smt_checker_input_VXKx:16:9: Warning: Assertion violation happens here
        assert(s1ref[msg.sender] == s2ref[msg.sender]);
        ^--------------------------------------------^
  for:
  a = (- 57896044618658097711785492504343953926634992332820282019728792003956564818994)
  b = 0
  msg.sender = 4679
  s1ref[msg.sender] = (- 1)
  s1ref_alias_s2ref = true
  s2ref[msg.sender] = 0

Callstack: 

smt_checker_input_VXKx:17:9: Warning: Assertion violation happens here
        assert(s[msg.sender] == b);
        ^------------------------^
  for:
  a = (- 57896044618658097711785492504343953926634992332820282019728792003956564810243)
  b = 0
  msg.sender = 2240
  s1ref[msg.sender] = 0
  s1ref_alias_s2ref = true
  s2ref[msg.sender] = 0
  s[msg.sender] = 1

Callstack: 

smt_checker_input_VXKx:11:29: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref[msg.sender] = s2ref[msg.sender] + 1;
                            ^-------------------^
  for:
  <result> = 0x80 * 2**248
  a = 0
  b = 1
  msg.sender = 2275
  s1ref[msg.sender] = 0x80 * 2**248 - 1
  s1ref_alias_s2ref = false
  s2ref[msg.sender] = 0x80 * 2**248 - 1

Callstack: 
smt_checker_input_VXKx:22:9: 
        test(s, s, 0, 1);
        ^--------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_VXKx:16:9: Warning: Assertion violation happens here
        assert(s1ref[msg.sender] == s2ref[msg.sender]);
        ^--------------------------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 867
  s1ref[msg.sender] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819128)
  s1ref_alias_s2ref = true
  s2ref[msg.sender] = 1

Callstack: 
smt_checker_input_VXKx:22:9: 
        test(s, s, 0, 1);
        ^--------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_VXKx:17:9: Warning: Assertion violation happens here
        assert(s[msg.sender] == b);
        ^------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 7578
  s1ref[msg.sender] = 1
  s1ref_alias_s2ref = true
  s2ref[msg.sender] = 1
  s[msg.sender] = (- 57896044618658097711785492504343953926634992332820282019728792003956564813090)

Callstack: 
smt_checker_input_VXKx:22:9: 
        test(s, s, 0, 1);
        ^--------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
0.15user 0.02system 0:00.17elapsed 99%CPU (0avgtext+0avgdata 39856maxresident)k
0inputs+0outputs (0major+2304minor)pagefaults 0swaps
