Running contracts/storageptr/MappingArrayFixedSizeStorageArgumentAliasSubStruct.sol
Warning: This is a pre-release compiler version, please do not use it in production.
smt_checker_input_JI2p:8:5: Warning: Assertion checker does not yet support the type of this variable.
    Sub s;
    ^---^
smt_checker_input_JI2p:13:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s1ref[msg.sender][0] = s2ref[msg.sender][1] + 1;
        ^------------------^
smt_checker_input_JI2p:16:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s1ref[msg.sender][1] = a;
        ^------------------^
smt_checker_input_JI2p:17:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s2ref[msg.sender][1] = b;
        ^------------------^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s[msg.sender][1] == b);
               ^-^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet implement type struct MappingArrayFixedSizeStorageArgumentAliasSubStruct.Sub storage ref
        assert(s.s[msg.sender][1] == b);
               ^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet implement this expression.
        assert(s.s[msg.sender][1] == b);
               ^-------------^
smt_checker_input_JI2p:13:32: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref[msg.sender][0] = s2ref[msg.sender][1] + 1;
                               ^----------------------^
  for:
  <result> = 0x80 * 2**248
  a = (- 57896044618658097711785492504343953926634992332820282019728792003956564814048)
  b = (- 57896044618658097711785492504343953926634992332820282019728792003956564814047)
  msg.sender = 535
  s1_ref_alias_s2_ref = false
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819687)
  s2ref[msg.sender][1] = 0x80 * 2**248 - 1

Callstack: 

smt_checker_input_JI2p:18:9: Warning: Assertion violation happens here
        assert(s1ref[msg.sender][1] == s2ref[msg.sender][1]);
        ^--------------------------------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 9725
  s1_ref_alias_s2_ref = true
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564811512)
  s1ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818645)
  s2ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564811512)
  s2ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818644)

Callstack: 

smt_checker_input_JI2p:19:9: Warning: Assertion violation happens here
        assert(s.s[msg.sender][1] == b);
        ^-----------------------------^
  for:
  a = (- 57896044618658097711785492504343953926634992332820282019728792003956564817692)
  b = (- 57896044618658097711785492504343953926634992332820282019728792003956564817693)
  msg.sender = 3609
  s.s[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564817692)
  s1_ref_alias_s2_ref = true
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819128)
  s1ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564811382)
  s2ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819128)
  s2ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564811382)

Callstack: 

smt_checker_input_JI2p:24:14: Warning: Assertion checker does not yet support this expression.
        test(s.s, s.s, 0, 1);
             ^-^
smt_checker_input_JI2p:24:14: Warning: Assertion checker does not yet implement type struct MappingArrayFixedSizeStorageArgumentAliasSubStruct.Sub storage ref
        test(s.s, s.s, 0, 1);
             ^
smt_checker_input_JI2p:24:19: Warning: Assertion checker does not yet support this expression.
        test(s.s, s.s, 0, 1);
                  ^-^
smt_checker_input_JI2p:24:19: Warning: Assertion checker does not yet implement type struct MappingArrayFixedSizeStorageArgumentAliasSubStruct.Sub storage ref
        test(s.s, s.s, 0, 1);
                  ^
smt_checker_input_JI2p:13:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s1ref[msg.sender][0] = s2ref[msg.sender][1] + 1;
        ^------------------^
smt_checker_input_JI2p:16:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s1ref[msg.sender][1] = a;
        ^------------------^
smt_checker_input_JI2p:17:9: Warning: Assertion checker does not yet implement assignments to multi-dimensional mappings or arrays.
        s2ref[msg.sender][1] = b;
        ^------------------^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s[msg.sender][1] == b);
               ^-^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet implement type struct MappingArrayFixedSizeStorageArgumentAliasSubStruct.Sub storage ref
        assert(s.s[msg.sender][1] == b);
               ^
smt_checker_input_JI2p:19:16: Warning: Assertion checker does not yet implement this expression.
        assert(s.s[msg.sender][1] == b);
               ^-------------^
smt_checker_input_JI2p:13:32: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref[msg.sender][0] = s2ref[msg.sender][1] + 1;
                               ^----------------------^
  for:
  <result> = 0x80 * 2**248
  a = 0
  b = 1
  msg.sender = 2455
  s1_ref_alias_s2_ref = false
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564817352)
  s2ref[msg.sender][1] = 0x80 * 2**248 - 1

Callstack: 
smt_checker_input_JI2p:24:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_JI2p:18:9: Warning: Assertion violation happens here
        assert(s1ref[msg.sender][1] == s2ref[msg.sender][1]);
        ^--------------------------------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 7629
  s1_ref_alias_s2_ref = true
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818860)
  s1ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819385)
  s2ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818860)
  s2ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564819386)

Callstack: 
smt_checker_input_JI2p:24:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
smt_checker_input_JI2p:19:9: Warning: Assertion violation happens here
        assert(s.s[msg.sender][1] == b);
        ^-----------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 2331
  s.s[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564816464)
  s1_ref_alias_s2_ref = true
  s1ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818320)
  s1ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564810566)
  s2ref[msg.sender][0] = (- 57896044618658097711785492504343953926634992332820282019728792003956564818320)
  s2ref[msg.sender][1] = (- 57896044618658097711785492504343953926634992332820282019728792003956564810566)

Callstack: 
smt_checker_input_JI2p:24:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
0.15user 0.01system 0:00.17elapsed 99%CPU (0avgtext+0avgdata 40012maxresident)k
0inputs+0outputs (0major+2230minor)pagefaults 0swaps
