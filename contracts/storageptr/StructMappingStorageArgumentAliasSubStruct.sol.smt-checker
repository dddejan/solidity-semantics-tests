Running contracts/storageptr/StructMappingStorageArgumentAliasSubStruct.sol
Warning: This is a pre-release compiler version, please do not use it in production.
smt_checker_input_EKI3:9:5: Warning: Assertion checker does not yet support the type of this variable.
    Sub s;
    ^---^
smt_checker_input_EKI3:11:19: Warning: Assertion checker does not yet support the type of this variable.
    function test(S storage s1ref, S storage s2ref, int a, int b) internal {
                  ^-------------^
smt_checker_input_EKI3:11:36: Warning: Assertion checker does not yet support the type of this variable.
    function test(S storage s1ref, S storage s2ref, int a, int b) internal {
                                   ^-------------^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^---^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----------------^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^-----^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^-----------------^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----------------^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet support this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^-----^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^---^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet implement this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^-----------------^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet support this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^-----^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^---^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet implement this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^-----------------^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = a;
        ^-----^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = a;
        ^---^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = a;
        ^-----------------^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = a;
        ^-----------------^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet support this expression.
        s2ref.x[msg.sender] = b;
        ^-----^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s2ref.x[msg.sender] = b;
        ^---^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement this expression.
        s2ref.x[msg.sender] = b;
        ^-----------------^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement this expression.
        s2ref.x[msg.sender] = b;
        ^-----------------^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet support this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^-----^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^---^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet implement this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^-----------------^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet support this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^-----^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^---^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet implement this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^-----------------^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s.x[msg.sender] == b);
               ^---^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage ref
        assert(s.s.x[msg.sender] == b);
               ^-^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s.x[msg.sender] == b);
               ^-^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.Sub storage ref
        assert(s.s.x[msg.sender] == b);
               ^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement this expression.
        assert(s.s.x[msg.sender] == b);
               ^---------------^
smt_checker_input_EKI3:14:31: Warning: Underflow (resulting value less than -57896044618658097711785492504343953926634992332820282019728792003956564819968) happens here
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---------------------^
  for:
  <result> = (- 115792089237316195423570985008687907853269984665640564039457584007913129639935)
  a = 1
  b = 0
  msg.sender = 0
  s1ref_alias_s2ref = false

Callstack: 

smt_checker_input_EKI3:14:31: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---------------------^
  for:
  <result> = 0x010000000000000000000000000000000000000000000000000000000000000001
  a = (- 1)
  b = 0
  msg.sender = 0
  s1ref_alias_s2ref = false

Callstack: 

smt_checker_input_EKI3:19:9: Warning: Assertion violation happens here
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
        ^------------------------------------------------^
  for:
  a = 1
  b = 0
  msg.sender = 0
  s1ref_alias_s2ref = true

Callstack: 

smt_checker_input_EKI3:20:9: Warning: Assertion violation happens here
        assert(s.s.x[msg.sender] == b);
        ^----------------------------^
  for:
  a = (- 1)
  b = 0
  msg.sender = 0
  s1ref_alias_s2ref = true

Callstack: 

smt_checker_input_EKI3:25:14: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage ref
        test(s.s, s.s, 0, 1);
             ^-^
smt_checker_input_EKI3:25:14: Warning: Assertion checker does not yet support this expression.
        test(s.s, s.s, 0, 1);
             ^-^
smt_checker_input_EKI3:25:14: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.Sub storage ref
        test(s.s, s.s, 0, 1);
             ^
smt_checker_input_EKI3:25:19: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage ref
        test(s.s, s.s, 0, 1);
                  ^-^
smt_checker_input_EKI3:25:19: Warning: Assertion checker does not yet support this expression.
        test(s.s, s.s, 0, 1);
                  ^-^
smt_checker_input_EKI3:25:19: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.Sub storage ref
        test(s.s, s.s, 0, 1);
                  ^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^---^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----------------^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^-----^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---^
smt_checker_input_EKI3:14:31: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^-----------------^
smt_checker_input_EKI3:14:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
        ^-----------------^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet support this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^-----^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^---^
smt_checker_input_EKI3:15:30: Warning: Assertion checker does not yet implement this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                             ^-----------------^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet support this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^-----^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^---^
smt_checker_input_EKI3:15:53: Warning: Assertion checker does not yet implement this expression.
        s1ref_alias_s2ref = (s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                                    ^-----------------^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet support this expression.
        s1ref.x[msg.sender] = a;
        ^-----^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s1ref.x[msg.sender] = a;
        ^---^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = a;
        ^-----------------^
smt_checker_input_EKI3:17:9: Warning: Assertion checker does not yet implement this expression.
        s1ref.x[msg.sender] = a;
        ^-----------------^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet support this expression.
        s2ref.x[msg.sender] = b;
        ^-----^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        s2ref.x[msg.sender] = b;
        ^---^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement this expression.
        s2ref.x[msg.sender] = b;
        ^-----------------^
smt_checker_input_EKI3:18:9: Warning: Assertion checker does not yet implement this expression.
        s2ref.x[msg.sender] = b;
        ^-----------------^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet support this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^-----^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^---^
smt_checker_input_EKI3:19:16: Warning: Assertion checker does not yet implement this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
               ^-----------------^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet support this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^-----^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage pointer
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^---^
smt_checker_input_EKI3:19:39: Warning: Assertion checker does not yet implement this expression.
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
                                      ^-----------------^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s.x[msg.sender] == b);
               ^---^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.S storage ref
        assert(s.s.x[msg.sender] == b);
               ^-^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet support this expression.
        assert(s.s.x[msg.sender] == b);
               ^-^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement type struct StructMappingStorageArgumentAliasSubStruct.Sub storage ref
        assert(s.s.x[msg.sender] == b);
               ^
smt_checker_input_EKI3:20:16: Warning: Assertion checker does not yet implement this expression.
        assert(s.s.x[msg.sender] == b);
               ^---------------^
smt_checker_input_EKI3:14:31: Warning: Underflow (resulting value less than -57896044618658097711785492504343953926634992332820282019728792003956564819968) happens here
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---------------------^
  for:
  <result> = (- 115792089237316195423570985008687907853269984665640564039457584007913129639935)
  a = 0
  b = 1
  msg.sender = 0
  s1ref_alias_s2ref = false

Callstack: 
smt_checker_input_EKI3:25:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

smt_checker_input_EKI3:14:31: Warning: Overflow (resulting value larger than 0x80 * 2**248 - 1) happens here
        s1ref.x[msg.sender] = s2ref.x[msg.sender] + 1;
                              ^---------------------^
  for:
  <result> = 0x010000000000000000000000000000000000000000000000000000000000000001
  a = 0
  b = 1
  msg.sender = 0
  s1ref_alias_s2ref = false

Callstack: 
smt_checker_input_EKI3:25:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

smt_checker_input_EKI3:19:9: Warning: Assertion violation happens here
        assert(s1ref.x[msg.sender] == s2ref.x[msg.sender]);
        ^------------------------------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 0
  s1ref_alias_s2ref = true

Callstack: 
smt_checker_input_EKI3:25:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

smt_checker_input_EKI3:20:9: Warning: Assertion violation happens here
        assert(s.s.x[msg.sender] == b);
        ^----------------------------^
  for:
  a = 0
  b = 1
  msg.sender = 0
  s1ref_alias_s2ref = true

Callstack: 
smt_checker_input_EKI3:25:9: 
        test(s.s, s.s, 0, 1);
        ^------------------^

0.09user 0.02system 0:00.11elapsed 100%CPU (0avgtext+0avgdata 38460maxresident)k
0inputs+0outputs (0major+1980minor)pagefaults 0swaps
